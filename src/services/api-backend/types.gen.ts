// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserDto = {
    email: string;
    password: string;
    confirmPassword: string;
};

export type UserRole = 'admin' | 'user';

export type PointDto = {
    type: 'Point';
    coordinates: Array<number>;
};

export type PhotonFeaturePropertyDto = {
    osm_id: number;
    osm_type: string;
    extent?: Array<number>;
    country?: string;
    osm_key?: string;
    city?: string;
    countrycode?: string;
    osm_value?: string;
    postcode?: string;
    name?: string;
    state?: string;
    street?: string;
    housenumber?: string;
    locality?: string;
    county?: string;
    district?: string;
    type?: string;
};

export type CreatePhotonFeatureDto = {
    type: 'Feature';
    geometry: PointDto;
    properties: PhotonFeaturePropertyDto;
};

export type Favorite = {
    photonFeature: CreatePhotonFeatureDto;
    title: string;
    destinationType: 'home' | 'normal';
    isPinned: boolean;
    userId: string;
    user: User;
    id: string;
    createdAt: string;
    updatedAt: string;
};

export type User = {
    role: UserRole;
    firstname: string | null;
    lastname: string | null;
    email: string;
    calibrationFactor: number | null;
    favorites: Array<Favorite>;
    id: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateUserResponseDto = {
    user: User;
    /**
     * JWT access token
     */
    accessToken: string;
};

export type UpdateUserDto = {
    firstname?: string;
    lastname?: string;
    calibrationFactor?: number | null;
    email?: string;
    password?: string;
    confirmPassword?: string;
};

export type LoginUserDto = {
    email: string;
    password: string;
};

export type CreateFavoriteDto = {
    title: string;
    destinationType: 'home' | 'normal';
    isPinned: boolean;
    photonFeature: CreatePhotonFeatureDto;
};

export type UpdateFavoriteDto = {
    title?: string;
    destinationType?: 'home' | 'normal';
    isPinned?: boolean;
    photonFeature?: CreatePhotonFeatureDto;
};

export type UsersControllerFindAllUsersData = {
    body?: never;
    url: '/api/users';
};

export type UsersControllerFindAllUsersResponses = {
    200: Array<User>;
};

export type UsersControllerFindAllUsersResponse = UsersControllerFindAllUsersResponses[keyof UsersControllerFindAllUsersResponses];

export type UsersControllerCreateUserData = {
    body: CreateUserDto;
    url: '/api/users';
};

export type UsersControllerCreateUserResponses = {
    201: CreateUserResponseDto;
};

export type UsersControllerCreateUserResponse = UsersControllerCreateUserResponses[keyof UsersControllerCreateUserResponses];

export type UsersControllerDeleteUserData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type UsersControllerDeleteUserResponses = {
    204: void;
};

export type UsersControllerDeleteUserResponse = UsersControllerDeleteUserResponses[keyof UsersControllerDeleteUserResponses];

export type UsersControllerFindUserByIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type UsersControllerFindUserByIdResponses = {
    200: User;
};

export type UsersControllerFindUserByIdResponse = UsersControllerFindUserByIdResponses[keyof UsersControllerFindUserByIdResponses];

export type UsersControllerUpdateUserData = {
    body: UpdateUserDto;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type UsersControllerUpdateUserResponses = {
    200: User;
};

export type UsersControllerUpdateUserResponse = UsersControllerUpdateUserResponses[keyof UsersControllerUpdateUserResponses];

export type AuthenticationControllerLogoutData = {
    body?: never;
    url: '/api/authentication';
};

export type AuthenticationControllerLogoutResponses = {
    204: void;
};

export type AuthenticationControllerLogoutResponse = AuthenticationControllerLogoutResponses[keyof AuthenticationControllerLogoutResponses];

export type AuthenticationControllerGetUserData = {
    body?: never;
    url: '/api/authentication';
};

export type AuthenticationControllerGetUserResponses = {
    200: User;
};

export type AuthenticationControllerGetUserResponse = AuthenticationControllerGetUserResponses[keyof AuthenticationControllerGetUserResponses];

export type AuthenticationControllerLoginData = {
    body: LoginUserDto;
    url: '/api/authentication';
};

export type AuthenticationControllerLoginResponses = {
    201: CreateUserResponseDto;
};

export type AuthenticationControllerLoginResponse = AuthenticationControllerLoginResponses[keyof AuthenticationControllerLoginResponses];

export type AuthenticationControllerConfirmEmailData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/api/authentication/confirm-email';
};

export type AuthenticationControllerConfirmEmailResponses = {
    200: unknown;
};

export type AuthenticationControllerForgotPasswordData = {
    body: {
        /**
         * The email address of the user who wants to reset their password.
         */
        email: string;
    };
    url: '/api/authentication/forgot-password';
};

export type AuthenticationControllerForgotPasswordResponses = {
    201: unknown;
};

export type FavoritesControllerFindAllFavoritesData = {
    body?: never;
    url: '/api/favorites';
};

export type FavoritesControllerFindAllFavoritesResponses = {
    200: Array<Favorite>;
};

export type FavoritesControllerFindAllFavoritesResponse = FavoritesControllerFindAllFavoritesResponses[keyof FavoritesControllerFindAllFavoritesResponses];

export type FavoritesControllerCreateFavoriteData = {
    body: CreateFavoriteDto;
    url: '/api/favorites';
};

export type FavoritesControllerCreateFavoriteResponses = {
    201: Favorite;
};

export type FavoritesControllerCreateFavoriteResponse = FavoritesControllerCreateFavoriteResponses[keyof FavoritesControllerCreateFavoriteResponses];

export type FavoritesControllerFindHomeAddressData = {
    body?: never;
    url: '/api/favorites/home';
};

export type FavoritesControllerFindHomeAddressResponses = {
    200: Favorite;
};

export type FavoritesControllerFindHomeAddressResponse = FavoritesControllerFindHomeAddressResponses[keyof FavoritesControllerFindHomeAddressResponses];

export type FavoritesControllerDeleteFavoriteData = {
    body?: never;
    path: {
        favoriteId: string;
    };
    query?: never;
    url: '/api/favorites/{favoriteId}';
};

export type FavoritesControllerDeleteFavoriteResponses = {
    200: Favorite;
};

export type FavoritesControllerDeleteFavoriteResponse = FavoritesControllerDeleteFavoriteResponses[keyof FavoritesControllerDeleteFavoriteResponses];

export type FavoritesControllerFindFavoriteByIdData = {
    body?: never;
    path: {
        favoriteId: string;
    };
    query?: never;
    url: '/api/favorites/{favoriteId}';
};

export type FavoritesControllerFindFavoriteByIdResponses = {
    200: Favorite;
};

export type FavoritesControllerFindFavoriteByIdResponse = FavoritesControllerFindFavoriteByIdResponses[keyof FavoritesControllerFindFavoriteByIdResponses];

export type FavoritesControllerUpdateFavoriteData = {
    body: UpdateFavoriteDto;
    path: {
        favoriteId: string;
    };
    query?: never;
    url: '/api/favorites/{favoriteId}';
};

export type FavoritesControllerUpdateFavoriteResponses = {
    200: Favorite;
};

export type FavoritesControllerUpdateFavoriteResponse = FavoritesControllerUpdateFavoriteResponses[keyof FavoritesControllerUpdateFavoriteResponses];