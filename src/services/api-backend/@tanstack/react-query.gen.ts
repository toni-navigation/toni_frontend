// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { UsersControllerFindAllUsersData, UsersControllerCreateUserData, UsersControllerCreateUserResponse, UsersControllerDeleteUserData, UsersControllerDeleteUserResponse, UsersControllerFindUserByIdData, UsersControllerUpdateUserData, UsersControllerUpdateUserResponse, AuthenticationControllerLogoutData, AuthenticationControllerLogoutResponse, AuthenticationControllerGetUserData, AuthenticationControllerLoginData, AuthenticationControllerLoginResponse, AuthenticationControllerConfirmEmailData, AuthenticationControllerForgotPasswordData, FavoritesControllerFindAllFavoritesData, FavoritesControllerCreateFavoriteData, FavoritesControllerCreateFavoriteResponse, FavoritesControllerDeleteFavoriteData, FavoritesControllerDeleteFavoriteResponse, FavoritesControllerFindFavoriteByIdData, FavoritesControllerUpdateFavoriteData, FavoritesControllerUpdateFavoriteResponse } from '../types.gen';
import { client, usersControllerFindAllUsers, usersControllerCreateUser, usersControllerDeleteUser, usersControllerFindUserById, usersControllerUpdateUser, authenticationControllerLogout, authenticationControllerGetUser, authenticationControllerLogin, authenticationControllerConfirmEmail, authenticationControllerForgotPassword, favoritesControllerFindAllFavorites, favoritesControllerCreateFavorite, favoritesControllerDeleteFavorite, favoritesControllerFindFavoriteById, favoritesControllerUpdateFavorite } from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const usersControllerFindAllUsersQueryKey = (options?: Options<UsersControllerFindAllUsersData>) => [
    createQueryKey('usersControllerFindAllUsers', options)
];

export const usersControllerFindAllUsersOptions = (options?: Options<UsersControllerFindAllUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindAllUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllUsersQueryKey(options)
    });
};

export const usersControllerCreateUserQueryKey = (options: Options<UsersControllerCreateUserData>) => [
    createQueryKey('usersControllerCreateUser', options)
];

export const usersControllerCreateUserOptions = (options: Options<UsersControllerCreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerCreateUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateUserQueryKey(options)
    });
};

export const usersControllerCreateUserMutation = (options?: Partial<Options<UsersControllerCreateUserData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateUserResponse, DefaultError, Options<UsersControllerCreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerCreateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerDeleteUserMutation = (options?: Partial<Options<UsersControllerDeleteUserData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerDeleteUserResponse, DefaultError, Options<UsersControllerDeleteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerDeleteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerFindUserByIdQueryKey = (options: Options<UsersControllerFindUserByIdData>) => [
    createQueryKey('usersControllerFindUserById', options)
];

export const usersControllerFindUserByIdOptions = (options: Options<UsersControllerFindUserByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindUserById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindUserByIdQueryKey(options)
    });
};

export const usersControllerUpdateUserMutation = (options?: Partial<Options<UsersControllerUpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateUserResponse, DefaultError, Options<UsersControllerUpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authenticationControllerLogoutMutation = (options?: Partial<Options<AuthenticationControllerLogoutData>>) => {
    const mutationOptions: UseMutationOptions<AuthenticationControllerLogoutResponse, DefaultError, Options<AuthenticationControllerLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authenticationControllerLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authenticationControllerGetUserQueryKey = (options?: Options<AuthenticationControllerGetUserData>) => [
    createQueryKey('authenticationControllerGetUser', options)
];

export const authenticationControllerGetUserOptions = (options?: Options<AuthenticationControllerGetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationControllerGetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationControllerGetUserQueryKey(options)
    });
};

export const authenticationControllerLoginQueryKey = (options: Options<AuthenticationControllerLoginData>) => [
    createQueryKey('authenticationControllerLogin', options)
];

export const authenticationControllerLoginOptions = (options: Options<AuthenticationControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationControllerLoginQueryKey(options)
    });
};

export const authenticationControllerLoginMutation = (options?: Partial<Options<AuthenticationControllerLoginData>>) => {
    const mutationOptions: UseMutationOptions<AuthenticationControllerLoginResponse, DefaultError, Options<AuthenticationControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authenticationControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authenticationControllerConfirmEmailQueryKey = (options: Options<AuthenticationControllerConfirmEmailData>) => [
    createQueryKey('authenticationControllerConfirmEmail', options)
];

export const authenticationControllerConfirmEmailOptions = (options: Options<AuthenticationControllerConfirmEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationControllerConfirmEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationControllerConfirmEmailQueryKey(options)
    });
};

export const authenticationControllerForgotPasswordQueryKey = (options: Options<AuthenticationControllerForgotPasswordData>) => [
    createQueryKey('authenticationControllerForgotPassword', options)
];

export const authenticationControllerForgotPasswordOptions = (options: Options<AuthenticationControllerForgotPasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationControllerForgotPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationControllerForgotPasswordQueryKey(options)
    });
};

export const authenticationControllerForgotPasswordMutation = (options?: Partial<Options<AuthenticationControllerForgotPasswordData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AuthenticationControllerForgotPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authenticationControllerForgotPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const favoritesControllerFindAllFavoritesQueryKey = (options?: Options<FavoritesControllerFindAllFavoritesData>) => [
    createQueryKey('favoritesControllerFindAllFavorites', options)
];

export const favoritesControllerFindAllFavoritesOptions = (options?: Options<FavoritesControllerFindAllFavoritesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await favoritesControllerFindAllFavorites({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: favoritesControllerFindAllFavoritesQueryKey(options)
    });
};

export const favoritesControllerCreateFavoriteQueryKey = (options: Options<FavoritesControllerCreateFavoriteData>) => [
    createQueryKey('favoritesControllerCreateFavorite', options)
];

export const favoritesControllerCreateFavoriteOptions = (options: Options<FavoritesControllerCreateFavoriteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await favoritesControllerCreateFavorite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: favoritesControllerCreateFavoriteQueryKey(options)
    });
};

export const favoritesControllerCreateFavoriteMutation = (options?: Partial<Options<FavoritesControllerCreateFavoriteData>>) => {
    const mutationOptions: UseMutationOptions<FavoritesControllerCreateFavoriteResponse, DefaultError, Options<FavoritesControllerCreateFavoriteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await favoritesControllerCreateFavorite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const favoritesControllerDeleteFavoriteMutation = (options?: Partial<Options<FavoritesControllerDeleteFavoriteData>>) => {
    const mutationOptions: UseMutationOptions<FavoritesControllerDeleteFavoriteResponse, DefaultError, Options<FavoritesControllerDeleteFavoriteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await favoritesControllerDeleteFavorite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const favoritesControllerFindFavoriteByIdQueryKey = (options: Options<FavoritesControllerFindFavoriteByIdData>) => [
    createQueryKey('favoritesControllerFindFavoriteById', options)
];

export const favoritesControllerFindFavoriteByIdOptions = (options: Options<FavoritesControllerFindFavoriteByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await favoritesControllerFindFavoriteById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: favoritesControllerFindFavoriteByIdQueryKey(options)
    });
};

export const favoritesControllerUpdateFavoriteMutation = (options?: Partial<Options<FavoritesControllerUpdateFavoriteData>>) => {
    const mutationOptions: UseMutationOptions<FavoritesControllerUpdateFavoriteResponse, DefaultError, Options<FavoritesControllerUpdateFavoriteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await favoritesControllerUpdateFavorite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};