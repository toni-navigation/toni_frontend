// This file is auto-generated by @hey-api/openapi-ts

export const CreateUserDtoSchema = {
    type: 'object',
    properties: {
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        password: {
            type: 'string',
            minLength: 8
        }
    },
    required: ['firstname', 'lastname', 'email', 'password']
} as const;

export const PointDtoSchema = {
    type: 'object',
    properties: {
        type: {
            oneOf: [
                {
                    type: 'string',
                    enum: ['Point']
                }
            ]
        },
        coordinates: {
            type: 'array',
            items: {
                type: 'number',
                maximum: 180,
                minimum: -180
            }
        }
    },
    required: ['type', 'coordinates']
} as const;

export const PhotonFeaturePropertyDtoSchema = {
    type: 'object',
    properties: {
        osm_id: {
            type: 'number'
        },
        osm_type: {
            type: 'string'
        },
        extent: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        country: {
            type: 'string'
        },
        osm_key: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        countrycode: {
            type: 'string'
        },
        osm_value: {
            type: 'string'
        },
        postcode: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        state: {
            type: 'string'
        },
        street: {
            type: 'string'
        },
        housenumber: {
            type: 'string'
        },
        locality: {
            type: 'string'
        },
        county: {
            type: 'string'
        },
        district: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    },
    required: ['osm_id', 'osm_type']
} as const;

export const CreatePhotonFeatureDtoSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string'
        },
        geometry: {
            '$ref': '#/components/schemas/PointDto'
        },
        properties: {
            '$ref': '#/components/schemas/PhotonFeaturePropertyDto'
        }
    },
    required: ['type', 'geometry', 'properties']
} as const;

export const FavoriteSchema = {
    type: 'object',
    properties: {
        photonFeature: {
            '$ref': '#/components/schemas/CreatePhotonFeatureDto'
        },
        name: {
            type: 'string'
        },
        destinationType: {
            enum: ['home', 'normal'],
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        id: {
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['photonFeature', 'name', 'destinationType', 'userId', 'user', 'id', 'createdAt', 'updatedAt']
} as const;

export const UserSchema = {
    type: 'object',
    properties: {
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string'
        },
        role: {
            enum: ['admin', 'user'],
            type: 'string'
        },
        calibrationFactor: {
            type: 'number',
            nullable: true
        },
        favorites: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Favorite'
            }
        },
        id: {
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['firstname', 'email', 'role', 'calibrationFactor', 'favorites', 'id', 'createdAt', 'updatedAt']
} as const;

export const CreateUserResponseDtoSchema = {
    type: 'object',
    properties: {
        user: {
            '$ref': '#/components/schemas/User'
        },
        accessToken: {
            type: 'string',
            description: 'JWT access token'
        }
    },
    required: ['user', 'accessToken']
} as const;

export const ExceptionDtoSchema = {
    type: 'object',
    properties: {
        statusCode: {
            type: 'number',
            description: 'HTTP status code'
        },
        message: {
            type: 'string',
            description: 'Error message'
        },
        error: {
            type: 'string',
            description: 'Error type'
        }
    },
    required: ['statusCode', 'message', 'error']
} as const;

export const UpdateUserDtoSchema = {
    type: 'object',
    properties: {
        calibrationFactor: {
            type: 'number',
            nullable: true
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        password: {
            type: 'string',
            minLength: 8
        }
    },
    required: ['calibrationFactor']
} as const;

export const LoginUserDtoSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    required: ['email', 'password']
} as const;

export const CreateEmailDtoSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        }
    },
    required: ['email']
} as const;

export const CreateFavoriteDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        destinationType: {
            type: 'string',
            enum: ['home', 'normal']
        },
        photonFeature: {
            '$ref': '#/components/schemas/CreatePhotonFeatureDto'
        }
    },
    required: ['name', 'destinationType', 'photonFeature']
} as const;

export const UpdateFavoriteDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        destinationType: {
            type: 'string',
            enum: ['home', 'normal']
        },
        photonFeature: {
            '$ref': '#/components/schemas/CreatePhotonFeatureDto'
        }
    }
} as const;